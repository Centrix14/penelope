#+title: Статический анализатор типов «Penelope»
#+author: Centrix14
#+startup: overview

* Определение пакета
Чтобы не засорять пакет пользователя =cl-user= определим свой, рабочий пакет, где будут храниться все функции.
#+begin_src lisp :tangle penelope.lisp
  (defpackage :penelope
    (:use :cl))

  (in-package :penelope)
#+end_src

#+RESULTS:
: #<PACKAGE "PENELOPE">
* Вычисление типов значений
** Простое получение типов
Для начала просто изучим типизацию в Common Lisp. Сделать это можно при помощи функции =type-of=. Первое же исследование открывает интересные подробности:
#+begin_src lisp
  (let ((x 14))
    (list (type-of 1) (type-of 14) (type-of x)))
#+end_src

#+RESULTS:
| BIT | (INTEGER 0 4611686018427387903) | (INTEGER 0 4611686018427387903) |

Выходит, что 0 — это =BIT=, а вот 14 и x — =INTEGER=.

Получается, что числа 0 и 1 считаются не числами, а битами. При том
#+begin_src lisp
  (typep 1 'integer)
#+end_src

#+RESULTS:
: T

Утвердительно кивает. Получается, что 1 является и битом и числом.
Занятно!
** Безопасное вычисление типов
Чтобы вычислять типы безопасно и абстрагироваться от всяких там =BIT= и =SIMPLE-ARRAY= напишем свою функцию.
#+begin_src lisp :tangle penelope.lisp
  (defun ty (x &optional recursive)
    (typecase x
      (integer 'integer)
      (string 'string)
      (boolean 'boolean)
      (t (type-of x))))
#+end_src

#+RESULTS:
: TY

=ty= — это распространённое в профессиональной среде сокращение для слова /type/. Так что тут всё с именованием нормально.
* Проверка типов
** Проверка типов в арифметических выражениях
Эта функция проверяет типы в арифметических выражениях.
#+begin_src lisp :tangle penelope.lisp
  (defun check-math (expr vars)
    (let* ((pattern '(integer integer))
           (match (map 'list #'equalp
                       (list (type-check (second expr) vars)
                             (type-check (third expr) vars))
                       pattern)))
      (values match
              pattern
              'integer)))
#+end_src

#+RESULTS:
: CHECK-MATH
** Проверка типов сравнений больше и меньше
#+begin_src lisp :tangle penelope.lisp
  (defun check-comparison (expr vars)
    (let* ((pattern '(integer integer))
           (match (map 'list #'eql
                       (list (type-check (second expr) vars)
                             (type-check (third expr) vars))
                       pattern)))
      (values match
              pattern
              'boolean)))
#+end_src

#+RESULTS:
: CHECK-COMPARISON
** Проверка типов в выражениях равно и не-равно
#+begin_src lisp :tangle penelope.lisp
  (defun check-eq (expr vars)
    (let* ((pattern (list (type-check (second expr) vars)
                          (type-check (second expr) vars)))
           (match (map 'list #'eql
                       (list (type-check (second expr) vars)
                             (type-check (third expr) vars))
                       pattern)))
      (values match
              pattern
              'boolean)))
#+end_src

#+RESULTS:
: CHECK-EQ
** Проверка типов в условных конструкциях
#+begin_src lisp :tangle penelope.lisp
  (defun check-if (expr &optional vars)
    (let* ((branch-type (if (member (third expr) vars)
                            (type-check (fourth expr) vars)
                            (type-check (third expr) vars)))
           (pattern (list 'boolean
                          branch-type
                          branch-type))
           (match (map 'list #'eql
                         (list (type-check (second expr) vars)
                               (type-check (third expr) vars)
                               (type-check (fourth expr) vars))
                         pattern)))
      (values match
              pattern
              (second pattern))))
#+end_src

#+RESULTS:
: CHECK-IF
** Проверка типов в лямбда-функциях
#+begin_src lisp :tangle penelope.lisp
  (defun check-lambda (expr &optional vars)
    (let* ((pattern (list 'list
                          (type-check (third expr) vars)))
           (match (map 'list #'eql
                           (list (ty (second expr))
                                 (type-check (third expr) vars))
                           pattern)))
      (values match
              pattern
              (second pattern))))
#+end_src

#+RESULTS:
: CHECK-LAMBDA
** Проверка типов в вызовах функций
#+begin_src lisp :tangle penelope.lisp
  (defun check-apply (expr &optional vars)
    (let* ((lambda-types (map 'list #'ty (second (second expr))))
           (arglist-types (map 'list
                               (lambda (arg)
                                 (type-check arg vars))
                               (third expr)))
           (match (map 'list #'eql
                             lambda-types
                             arglist-types)))
      (values match
              lambda-types
              (list lambda-types
                    (type-check (second expr) vars)))))
#+end_src

#+RESULTS:
: CHECK-APPLY

** Полная проверка типов
#+begin_src lisp :tangle penelope.lisp
  (defun type-check (expr vars)
    (if (listp expr)
        (multiple-value-bind (matching pattern expr-type)
            (case (first expr)
              ((+ - * /) (check-math expr vars))
              ((> <) (check-comparison expr vars))
              ((= !=) (check-eq expr vars))
              ((if) (check-if expr vars))
              ((lambda) (check-lambda expr vars))
              ((apply) (check-apply expr vars))
              (otherwise (error "Expression ~a has incorrect types" expr)))

          (map nil
               (lambda (result wish-type val)
                 (if result
                     nil
                     (if (member val vars)
                         (format t "Expression ~a has type ~a | ~a~%"
                                 val wish-type expr)
                         (error "Expression ~a must have type ~a | ~a~%"
                                val wish-type expr))))
               matching pattern (cdr expr))
          (values expr-type pattern))

        (ty expr t)))
#+end_src

#+RESULTS:
: TYPE-CHECK
